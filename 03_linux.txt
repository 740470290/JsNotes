netstat -ntlp    查看所有tcp端口
cat /etc/redhat-release    查看centos版本
uname -a    查看内核版本
curl http://127.0.0.1:8080    爬虫
wget http://127.0.0.1:8080    爬虫并保存为index.html
wget http://106.14.12.44:80 --no-check-certificate  对于https的网站需要加上后面的内容
find / -name 'nginx.conf'   查找文件
firewall-cmd --state    查看防火墙
yum install gcc-c++    安装g++
service docker status    查看程序状态
service docker start	开启
service docker restart    重启
cd /etc/sysconfig/network-scripts/    配置ip
vi ifcfg-eth0    打开ip配置文件
// yum
yum list installed    已经安装的包
yum list installed | grep ngnix   是否安装某个包
// shell脚本
#!/bin/sh
count=0
while [ $count -lt 10 ]
    do
        echo $count
        count=$((count + 1))
        sleep 2s
    done



// docker
// centos 6安装
yum install -y epel-release
yum install -y docker-io
service docker start
docker三大特征:镜像,容器,仓库
// 阿里云镜像加速器地址
https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors
docker pull    需要阿里云镜像加速,在docker配置文件中写入镜像地址
docker search    查找镜像
docker pull mysql:5.6    指定版本
docker ps	显示当前容器状态
docker ps -l	last,最新的容器
docker ps -q    只显示容器的id
docker ps -a	all,所有开启过的容器
docker cp [name]:容器内路径 主机目标路径
docker run -it --name dc01 [name]    开启镜像,并指定名称
docker run -d -p 6666:8080 tomcat    后台开启
-e MYSQL_ROOT_PADDWORD=123456    初始化root用户的密码
docker start [name]    开启容器
docker stop [name or hash]		结束
docker kill [name | hash]	强制结束
docker inspect [name | hash]	打印具体信息
docker top [name | hash]	查看状态
ctrl+p+q	退出当前docker
docker attach [name]	退出后重新进入
docker exec -it 22 ls    在容器外执行容器内的命令
docker exec -it 22 /bin/bash	进去容器
docker exec [name] sh -c ' exec mysqldump --all-databases -uroot -p "123456" ' > /root/all-databases.sql    把容器内的数据库备份出来
docker pull [name]    安装镜像
docker images	查看镜像
docker run -it -p 8080:8080 tomcat    
-i  交互,-t   终端,-p   指定端口,-P随机端口
docker commit -a="cj" -m="tomcat without docs" 50 chenjian/mytomcat:1.2    50是容器的id
提交一个自己的镜像
docker save zhaoolee-qs:1.0 > qs01.tar    保存为压缩文件
scp ./qs01.tar root@192.168.214.162:/qs01.tar    远程传输到服务器
docker load < qs01.tar    加载镜像
docker run -it -p 8080:8080 chenjian/mytomcat:1.2    开启,可以同时指定多个端口
// docker容器数据卷    数据的持久化,共享数据
docker run -it -v 宿主机绝对路径:容器内绝对路径 镜像名
docker run -it -v 宿主机绝对路径:容器内绝对路径:ro 镜像名    只读模式,只有宿主机可以写
docker build -f /myvolum/Dockerfile -t chenjian/volum .    把/myvolum/Dockerfile文件,做成一个chenjian/volum镜像
// Dockerfile的内容
FROM centos
VOLUME /data
CMD echo "success======="
CMD /bin/bash
docker run -it [name]
docker inspect [name]
"/data": "/var/lib/docker/volumes/ddc07776a5bdb22ac87f16f61857054e5e40cce3430e0ef5e9d47fc968a40d76/_data"    宿主机上自动挂载的目录
// 容器数据卷,宿主机==>dc01==>dc02    数据会备份3份,即使dc01被删除了,其余容器间也可以共享
docker run -it --name dc01 [name]
touch dc01_add.txt
docker run -it --name dc02 --volumes-from dc01 chenjian/volum    新建一个容器继承于dc01
touch dc02_add.txt
==================
FROM centos
ENV mypath /tmp    
WORKDIR $mypath
RUN yum -y install vim
RUN yum -y install net-tools
EXPOSE 8080
CMD /bin/bash
==================
ENV    环境变量
WORKDIR    进去后的默认打开目录
RUN    执行的命令
EXPOSE	  暴露的端口
CMD    如果在run语句后面加命令,会覆盖它,多个CMD语句时,只执行最后一个
ENTRYPOINT    多个CMD语句时,会追加
ONBUILD    FROM chenjian/volum:1.7,如果Dockerfile文件继承有ONBUILD的Dockerfile,那么在build的时候,每次build都会执行这个语句
COPY    拷贝
ADD    拷贝+解压
==================
FROM centos
RUN yum -y install curl
CMD ["curl","-s","https://ip.cn"]
==================
FROM centos
RUN yum -y install curl
ENTRYPOINT ["curl","-s","https://ip.cn"]
==================
FROM centos
RUN yum -y install curl
ENTRYPOINT ["curl","-s","https://ip.cn"]
ONBUILD RUN echo "father images onbuild--------886"
==================
// docker权限不够的问题,添加 docker run --privileged=true

// CentOS 6.5 root启动docker Cannot connect to the Docker daemon,问题
 yum-config-manager –enable public_ol6_latest
 yum install device-mapper-event-libs



vim /etc/sysconfig/iptables    编辑防火墙配置文件
-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT    防止防火墙占用80端口
-A INPUT -m state --state NEW -m tcp -p tcp --dport 4873 -j ACCEPT    开放 4873 端口
/etc/init.d/iptables restart    重启一下防火墙